{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Line}from'react-chartjs-2';import{Chart as ChartJS,Title,Tooltip,Legend,CategoryScale,LinearScale,PointElement,LineElement}from'chart.js';import axios from'axios';// Register Chart.js components\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(Title,Tooltip,Legend,CategoryScale,LinearScale,PointElement,LineElement);const CostChart=()=>{const[costData,setCostData]=useState([]);// Remove TypeScript annotations\nconst[service,setService]=useState('All');// State for storing the selected service\n// Function to handle changes in service selection\nconst handleServiceChange=event=>{setService(event.target.value);// Update the service selection\n};useEffect(()=>{// Fetch data from FastAPI endpoint\naxios.post('http://localhost:8000/cost-analysis/',{start_date:'2025-01-01',// Example start date\nend_date:'2025-01-31',// Example end date\nservice:service==='All'?'':service// If \"All\", send an empty string for service\n}).then(response=>setCostData(response.data.cost_data)).catch(error=>console.error('API Error:',error));},[service]);// Re-fetch data whenever the service changes\n// Prepare chart data\nconst chartData={labels:costData.map(data=>data.service),// X-axis: service names\ndatasets:[{label:'Service Cost',data:costData.map(data=>data.cost),// Directly use the numeric cost value\nborderColor:'rgba(75,192,192,1)',// Line color\nbackgroundColor:'rgba(75,192,192,0.2)',// Fill color\nfill:true}]};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Cost Analysis\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"service\",children:\"Select Service: \"}),/*#__PURE__*/_jsxs(\"select\",{id:\"service\",value:service,onChange:handleServiceChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"All\",children:\"All Services\"}),/*#__PURE__*/_jsx(\"option\",{value:\"EC2\",children:\"EC2\"}),/*#__PURE__*/_jsx(\"option\",{value:\"S3\",children:\"S3\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Lambda\",children:\"Lambda\"})]})]}),costData.length>0?/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Line,{data:chartData})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"})]});};export default CostChart;","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","Title","Tooltip","Legend","CategoryScale","LinearScale","PointElement","LineElement","axios","jsx","_jsx","jsxs","_jsxs","register","CostChart","costData","setCostData","service","setService","handleServiceChange","event","target","value","post","start_date","end_date","then","response","data","cost_data","catch","error","console","chartData","labels","map","datasets","label","cost","borderColor","backgroundColor","fill","children","htmlFor","id","onChange","length"],"sources":["/Users/ankurkashyap/Documents/Cloud-business-project/Cost-optimization/test/cloud-cost-optimizer-ui/src/components/CostChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, Title, Tooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement } from 'chart.js';\nimport axios from 'axios';\n\n// Register Chart.js components\nChartJS.register(Title, Tooltip, Legend, CategoryScale, LinearScale, PointElement, LineElement);\n\nconst CostChart = () => {\n  const [costData, setCostData] = useState([]);  // Remove TypeScript annotations\n  const [service, setService] = useState('All'); // State for storing the selected service\n\n  // Function to handle changes in service selection\n  const handleServiceChange = (event) => {\n    setService(event.target.value); // Update the service selection\n  };\n\n  useEffect(() => {\n    // Fetch data from FastAPI endpoint\n    axios\n      .post('http://localhost:8000/cost-analysis/', {\n        start_date: '2025-01-01',  // Example start date\n        end_date: '2025-01-31',    // Example end date\n        service: service === 'All' ? '' : service, // If \"All\", send an empty string for service\n      })\n      .then((response) => setCostData(response.data.cost_data))\n      .catch((error) => console.error('API Error:', error));\n  }, [service]); // Re-fetch data whenever the service changes\n\n  // Prepare chart data\n  const chartData = {\n    labels: costData.map((data) => data.service),  // X-axis: service names\n    datasets: [\n      {\n        label: 'Service Cost',\n        data: costData.map((data) => data.cost),  // Directly use the numeric cost value\n        borderColor: 'rgba(75,192,192,1)',  // Line color\n        backgroundColor: 'rgba(75,192,192,0.2)',  // Fill color\n        fill: true,\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <h2>Cost Analysis</h2>\n      \n      {/* Dropdown for selecting the service */}\n      <div>\n        <label htmlFor=\"service\">Select Service: </label>\n        <select id=\"service\" value={service} onChange={handleServiceChange}>\n          <option value=\"All\">All Services</option>\n          <option value=\"EC2\">EC2</option>\n          <option value=\"S3\">S3</option>\n          <option value=\"Lambda\">Lambda</option>\n          {/* Add more options as needed */}\n        </select>\n      </div>\n\n      {costData.length > 0 ? (\n        <div>\n          {/* Display chart if costData exists */}\n          <Line data={chartData} />\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default CostChart;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}